ESTRUTURAS DE CONTROLE

Estruturas de controle em programação são usadas para controlar a execução de um programa, permitindo que você tome decisões, crie repetições e controle o fluxo de execução do código. Existem três estruturas de controle fundamentais em Python:

1 - Estrutura de Controle Condicional (if, elif, else):

A estrutura condicional permite que você tome decisões com base em condições. O bloco if verifica se uma condição é verdadeira e executa um bloco de código associado se a condição for verdadeira. O elif (abreviação de "else if") permite verificar condições adicionais, e o else fornece um bloco de código a ser executado se nenhuma das condições anteriores for verdadeira.

Exemplo:

idade = 18
if idade < 18:
    print("Você é menor de idade.")
elif idade == 18:
    print("Você tem 18 anos.")
else:
    print("Você é maior de idade.")

2 - Estrutura de Repetição (for, while):

Estruturas de repetição permitem que você execute um bloco de código várias vezes. O loop for é usado para iterar sobre uma sequência, como uma lista. O loop while continua a repetição enquanto uma condição específica for verdadeira.

Exemplo (loop for):

frutas = ["maçã", "banana", "laranja"]
for fruta in frutas:
    print(fruta)

for i in range(0,10,x):
	print(i)

Exemplo (loop while):

contador = 0
while contador < 5:
    print(contador)
    contador += 1

3 - Estrutura de Controle de Fluxo (break, continue, return):

Estas estruturas permitem controlar o fluxo de execução dentro de loops e funções. O break é usado para sair de um loop antes de ser concluído. O continue pula para a próxima iteração do loop. O return é usado para retornar um valor de uma função.

Exemplo (break e continue):


for i in range(10):
    if i == 3:
        break  # Sai do loop quando i for igual a 3
    if i == 7:
        continue  # Pula a iteração quando i for igual a 7
    print(i)

Exemplo (return):

def soma(a, b):
    resultado = a + b
    return resultado
Essas estruturas de controle são essenciais para escrever programas que tomam decisões, repetem tarefas e controlam o fluxo de execução. Elas ajudam a tornar seu código mais dinâmico e funcional.




